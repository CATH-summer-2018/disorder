#!/usr/bin/python
'''
Module for working with the disorder files generated by iupred
'''
import requests
import os

import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import scipy

import nglview


def plot_distr(short,
               long,
               title=False,
               savedname=False,
               legend=False):
    '''
    Plots distributions, usually used for showing how many domains have high disorder
    '''
    fig, ax = plt.subplots(figsize=(15,5))
    ax.plot([0, max(len(long),len(short))], [0.5,0.5], color='black', linewidth=0.7)
    s = ax.plot(short.sort_values().values, label='SHORT')
    l = ax.plot(long.sort_values().values, label='LONG')
    ax.set_xlim(0, max(len(short),len(long)))
    if title:
        plt.title(title)
    if legend:
        plt.legend()
    if savedname:
        plt.savefig(savedname, bbox_inches='tight')
    plt.show()

def show_structure(domain):
    '''
    Uses nglview and requests to fetch domain PDB and show it in jupyter
    '''

    if (domain + '.pdb') in os.listdir('structures'):
        return nglview.show_file('./structures/' + domain + '.pdb')
    else:
        r = requests.get('http://www.cathdb.info/version/v4_2_0/api/rest/id/' + domain + '.pdb')
        with open('./structures/' + domain + '.pdb', 'w') as file:
            file.write(r.text)
        return nglview.show_file('./structures/' + domain + '.pdb')

def scrape_sfam(df, gr):
    '''
    Compiles information for each CATH superfamily rather than each domain
    '''
    dom_len = pd.Series()
    long = pd.Series()
    short = pd.Series()
    std_long = pd.Series()
    std_short = pd.Series()
    for n, d in gr:
        short[n] = d.SHORT.mean()
        long[n] = d.LONG.mean()
        std_short[n] = d.SHORT.std()
        std_long[n] = d.LONG.std()
        dom_len[n] = d.LEN.mean()
    size = df.SFAM.value_counts()
    sfam = pd.DataFrame({'SIZE' : size,
                         'STD_SHORT' : std_short,
                         'STD_LONG' : std_long,
                         'LEN' : dom_len,
                         'SHORT' : short,
                        'LONG':long})
    return sfam

def compile_sfam(df):
    gr = df.groupby('SFAM')
    sfam = scrape_sfam(df, gr)
    sfam['DIFF'] = (sfam['LONG'] - sfam['SHORT']).abs().round(4)
    return sfam
